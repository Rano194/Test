-- MM2 FARM

if not game:IsLoaded() then 
    game.Loaded:Wait()
end

print("Info | Loading script")
Autofarm_Enable = false

task.wait(30)

-- Button Device Select
local Players = game:GetService("Players")

for i = 1, 120 do
    task.wait(1)
    local deviceSelect = Players.LocalPlayer:FindFirstChild("PlayerGui") and Players.LocalPlayer.PlayerGui:FindFirstChild("DeviceSelect")    
    if deviceSelect then
        local success = pcall(function()
            function button_click(button_obj)
                local events = {"MouseButton1Down", "MouseButton1Click", "Activated"}
        
                for _, event in pairs(events) do
                    for _, connection in pairs(getconnections(button_obj[event])) do
                        pcall(function()
                            connection:Fire()
                        end)
                    end
                end
            end
        
            local button_path = Players.LocalPlayer.PlayerGui:WaitForChild("DeviceSelect", 10).Container.Phone.Button
        
            if button_path then
                button_click(button_path)
                return true 
            end
        end)

        if success then
            break
        end
    end
end

-- Gui
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Test/refs/heads/main/43"))()

-- Getting coin summer
local success, data = pcall(function()
    return game:GetService("ReplicatedStorage").Remotes.Inventory.GetProfileData:InvokeServer()
end)

if success and data and data.Materials and data.Materials.Owned then
    SummerCoin = data.Materials.Owned.BeachBalls2025 or 0
    SummerCoinSession = 0
    Coin.Text = "Coin: " .. SummerCoin .. " ( + " .. SummerCoinSession .. " )"
end

-- Anti Afk
task.spawn(function()
    local vu = game:GetService("VirtualUser")
    while true do
        task.wait(300)
        vu:CaptureController()
        vu:ClickButton2(Vector2.new())
        workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * CFrame.Angles(0, math.rad(math.random(-2,2)), 0)
    end
end)

-- EVENT

-- Event Check Died

Players.LocalPlayer.CharacterAdded:Connect(function(character)
	character:WaitForChild("Humanoid").Died:Connect(function()
        print("Died")
        Status.Text = "Status: Process died"
		Autofarm_Enable = false
	end)
end)

-- Event Start Round
RoundStartEvent = game.ReplicatedStorage.Remotes.Gameplay.RoundStart
RoundStartEvent.OnClientEvent:Connect(function()
    print("Start event round")
    Status.Text = "Status: Start game | Loading"
	Autofarm_Enable = true
end)

-- Event End Round
RoundEndEvent = game.ReplicatedStorage.Remotes.Gameplay.RoundEndFade
RoundEndEvent.OnClientEvent:Connect(function()
    print("End event round")
    Status.Text = "Status: End game | Loading"
	Autofarm_Enable = false
end)

-- Event Collected Coin
local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()

CoinCollectedEvent = game.ReplicatedStorage.Remotes.Gameplay.CoinCollected
CoinCollectedEvent.OnClientEvent:Connect(function(cointype, current, max)
    SummerCoinSession += 1
    SummerCoin += 1
    Coin.Text = "Coin: " .. SummerCoin .. " ( + " .. SummerCoinSession .. " )"
    Status.Text = "Status: Collecting coin ("..current.." / "..max..")"
	if tonumber(current) == tonumber(max) then
		Autofarm_Enable = false
        Players.LocalPlayer.Character.Humanoid.Health = 0
	end
end)

-- END EVENT

local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local Humanoid = Character:WaitForChild("Humanoid")

Players.LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = char:WaitForChild("Humanoid")
end)

local attemptedCoins = {}
local range, coin, tween

-- Getting container coin
local function GetCoinContainer()
    for _, v in Workspace:GetChildren() do
        local CoinContainer = v:FindFirstChild("CoinContainer")
        if CoinContainer then
            return CoinContainer
        end
    end
end

-- Getting coin CFrame
local function GetCoin()
    local CoinContainer = GetCoinContainer()
    if CoinContainer then
        local nearestRange, bestCoin = math.huge
        for _, v in CoinContainer:GetChildren() do
            if v:FindFirstChild("TouchInterest") and not attemptedCoins[v] then
                local Magnitude = (Character:GetPivot().Position - v.Position).Magnitude
                if Magnitude < nearestRange then
                    nearestRange, bestCoin = Magnitude, v
                end
            end
        end
        return nearestRange, bestCoin
    end
end

-- Delete coin
local function SetupDescendantRemoving()
    Workspace.DescendantRemoving:Connect(function(descendant)
        if descendant == coin or descendant.Parent == coin then
            if tween then
                tween:Cancel()
                tween = nil
            end
            attemptedCoins[coin] = nil  
            coin = nil
        end
    end)
end

-- Autofarm
local function Tick()
	local success, err = pcall(function()
		if Character then
			range, coin = GetCoin()
			if coin then
				attemptedCoins[coin] = true

				local coinPosition = coin.Position
				local belowCoinPosition = coinPosition - Vector3.new(0, 10, 0)

				local tween1 = TweenService:Create(
					Character.PrimaryPart,
					TweenInfo.new((Character.PrimaryPart.Position - belowCoinPosition).Magnitude / Humanoid.WalkSpeed, Enum.EasingStyle.Linear),
					{CFrame = CFrame.new(belowCoinPosition)}
				)
				tween1:Play()
				tween1.Completed:Wait()

				local tween2 = TweenService:Create(
					Character.PrimaryPart,
					TweenInfo.new(5 / Humanoid.WalkSpeed, Enum.EasingStyle.Linear), 
					{CFrame = coin.CFrame}
				)
				tween2:Play()
				tween2.Completed:Wait()

				tween = nil
			else
				attemptedCoins = {}
			end
		end
	end)

	if not success then
		warn("Error:", err)
	end
end

-- Run
SetupDescendantRemoving()

while task.wait() do
    if Autofarm_Enable == true then
        Tick()
    end
end
